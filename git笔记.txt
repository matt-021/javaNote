git命令中文乱码  
 1 右键设置编码格式为utf—8
  2 还是不行 cmd 命令 git config --global core.quotepath false 来改变git的配置默认转义

git拉项目到本地  
 
   直接clone git clone是一个组合，clone会包含init，remote，fetch，checkout这些操作
   故
	git clone -b 分支名字 http地址 设置别名（设置别名选填）
	不加-b 分支名字 则默认clone主分支
	
提项目
    1查看当前分支
    	git branch -a
    2如果自己不在所在的分支
      	git  checkout  想要操作的分支名
   3git提交代码五步走
   	 添加文件 git add
   	 提交本地 git commit -m 提交信息
   	 更新代码 git pull   
   	 处理冲突
    	推送代码 git push -u origin 想要操作的分支  第一次需这么写  让本地跟远程分支关联起来  以后都可以直接git push 简写就可以



初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

使用命令git add 文件名，注意，可反复多次使用，添加多个文件；执行上面的命令，没有任何显示，这就对了，说明添加成功。
使用命令git commit -m “描述信息”，完成。


git status告诉你有文件被修改过，用git diff可以查看修改内容 diff顾名思义就是查看difference


HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
上一个版本就是HEAD^，如  $ git reset --hard HEAD^         上上一个版本就是HEAD^^  以此类推



穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本


工作区 ，暂存区，版本库（仓库depository）
Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。
用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
我们回顾一下操作过程：

第一次修改 -> git add -> 第二次修改 -> git commit

你看，我们前面讲了，Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，
准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了
，也就是第一次的修改被提交了，第二次的修改不会被提交。

关于git reset的原理说明

　　那么说完了这些，我们就说一下git reset的原理。git reset的原理简单来说就是把HEAD指针回退一位。即如果你在提交区，
那么你回退一位就是暂存区，如果你在暂存区，
那么指针会回退到上一次的提交区。
checkout的原理

　　说完了git reset，我们来说一下checkout命令，checkout的原理基础也是和HEAD有关。
checkout命令就是把把当前代码更新成头指针指向的提交。




命令git checkout -- test.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。


1.没有git add时，用git checkout -- file

2.已经git add时，先git reset HEAD <file>回退到1.，再按1.操作

3.已经git commit时，用git reset回退版本

4.推送到远程库，GG?




命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删



要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；


创建与合并分支

git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
然后，用git branch命令查看当前分支：

$ git branch
* dev
  master
git branch命令会列出所有分支，当前分支前面会标一个*号。

合并  git merge 分支名   


小结
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>或者git switch <name>

创建+切换分支：git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。


合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而fast forward合并就看不出来曾经做过合并。
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：

$ git merge --no-ff -m "merge with no-ff" dev
Merge made by the 'recursive' strategy.
 readme.txt | 1 +
 1 file changed, 1 insertion(+)
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
$ git checkout dev

在实际开发中，我们应该按照几个基本原则进行分支管理：

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。